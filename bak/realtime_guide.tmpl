{% set appid = '{{appid}}' %}
{% set appkey = '{{appkey}}' %}
{% set masterkey = '{{masterkey}}' %}

#  实时通信开发指南 &middot; {{platform_name}}

## 简介

实时通信服务可以让你一行后端代码都不用写，就能做出一个功能完备的实时聊天应用，或是一个实时对战类的游戏。所有聊天记录都保存在云端，离线消息会通过消息推送来及时送达，推送消息文本可以灵活进行定制。

>在继续阅读本文档之前，请先阅读[《实时通信开发指南》](./realtime_v2.html)，了解一下实时通信的基本概念和模型。

{% block supportedRuntime %}{% endblock %}

### 文档贡献
我们欢迎和鼓励大家对本文档的不足提出修改建议。请访问我们的 [Github 文档仓库](https://github.com/leancloud/docs) 来提交 Pull Request。

## Demo
相比阅读文档，如果你更喜欢从代码入手了解功能的具体实现，可以下载 Demo 来研究：

{% block demo %}{% endblock %}

我们把所有 Demo 项目放在了 [LeanCloud Demos 资源库](https://github.com/leancloud/leancloud-demos) 中，方便大家浏览和参考。

## 安装和初始化
{% block setup_init %}{% endblock %}

{% block compatibility %}{% endblock %}

## 单聊

我们先从最简单的环节入手。此场景类似于微信的私聊、微博的私信和 QQ 单聊。我们创建了一个统一的概念来描述聊天的各种场景：`AVIMConversation`（对话），在[《实时通信开发指南》](./realtime_v2.html) 里也有相关的详细介绍。

### 发送消息

![Tom and Jerry](images/tom-and-jerry-avatar.png)

Tom 想给 Jerry 发一条消息，实现代码如下：

{% block oneOnOneChat_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 向 Jerry 发送消息："耗子，起床！"
```
{% endblock %}

{% if node=='qcloud' %}
执行完以上代码，在 LeanCloud 网站的 控制台 /（选择应用）/ 存储 / 数据 / `_Conversation ` 表 中多了一行数据，其字段含义如下：
{% else %}
执行完以上代码，在 LeanCloud 网站的 [控制台 /（选择应用）/ 存储 / 数据 / `_Conversation ` 表](/data.html?appid={{appid}}#/_Conversation) 中多了一行数据，其字段含义如下：
{% endif %}

名称|类型|描述
---|---|---
name|String|对话唯一的名字
m|Array|对话中成员的列表
lm|Date|对话中最后一条消息发送的时间
c|String|对话的创建者的 ClientId
mu|Array|对话中设置了静音的成员，仅针对 iOS 以及 Windows Phone 用户有效。
attr|Object|开发者设置的对话的自定义属性

{% block avoidCreatingDuplicateConversation %}{% endblock %}

### 接收消息

要让 Jerry 收到 Tom 的消息，需要这样写：

{% block oneOnOneChat_received %}{% endblock %}

{% block androidMessageHandler %}{% endblock %}

## 群聊

对于多人同时参与的固定群组，我们有成员人数限制，最大不能超过 500 人。对于另外一种多人聊天的形式，譬如聊天室，其成员不固定，用户可以随意进入发言的这种「临时性」群组，后面会单独介绍。

### 发送消息

Tom 想建立一个群，把自己好朋友都拉进这个群，然后给他们发消息，他需要做的事情是：

1. 建立一个朋友列表
2. 新建一个对话，把朋友们列为对话的参与人员
3. 发送消息

{% block groupChat_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 建立一个朋友列表 friends：[Jerry, Bob, Harry, William]
- 新建对话，把朋友们列为对话的参与人员
- 发送消息：'你们在哪儿？'
```
{% endblock %}
### 接收消息

群聊的接收消息与单聊的接收消息在代码写法上是一致的。

{% block groupChat_received %}
```
- 初始化 ClientId = Bob
- Bob 登录到系统
- 调用接收消息的方法
- Bob 收到消息后，又回复了一条：@Tom, 我在 Jerry 家，你跟 Harry 什么时候过来？还有 William 和你在一起么？
```
{% endblock %}

以上由 Tom 和 Bob 发送的消息，William 在上线时都会收到。

由此可以看出，**群聊和单聊本质上都是对话**，只是参与人数不同。单聊是一对一的对话，群聊是多对多的对话。

用户在开始聊天之前，需要先登录 LeanCloud 云端。这个登录并不需要用户名和密码认证，只是与 LeanCloud 云端建立一个长连接，所以只需要传入一个唯一标识作为当前用户的 `clientId` 即可。

为直观起见，我们使用了 Tom、Jerry 等字符串作为 clientId 登录聊天系统。LeanCloud 云端只要求 clientId 在应用内唯一、不超过 64 个字符的字符串即可，具体用什么数据由应用层决定。

实时通信 SDK 在内部会为每一个 clientId 创建唯一的 `AVIMClient` 实例，也就是说多次使用相同的 clientId 创建出来的实例还是同一个。因此，如果要支持同一个客户端内多账号登录，只要使用不同的 clientId 来创建多个实例即可。我们的 SDK 也支持多账户同时登录。

## 消息

消息是一个对话的基本组成部分，我们支持的消息类型有：

- 文本消息：`AVIMTextMessage`
- 图像消息：`AVIMImageMessage`
- 音频消息：`AVIMAudioMessage`
- 视频消息：`AVIMVideoMessage`
- 文件消息：`AVIMFileMessage`
- 位置消息：`AVIMLocationMessage`

### 富媒体消息

#### 图像消息

图像可以从系统提供的拍照 API 或本地媒体库中获取，也可以用有效的图像 URL。先调用 SDK  方法构造出一个 `AVIMImageMessage` 对象，然后把它当做参数交由 `AVIMConversation` 发送出去即可。

##### 发送图像消息

【场景一】用系统自身提供的 API 去获取本地媒体库里的照片的数据流，然后构造出 `AVIMImageMessage` 来发送：

{% block imageMessage_local_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 从系统媒体库获取第一张照片
- 创建图像消息
- 给图像加一个自定义属性：location = '旧金山'
- 图像 Title：'发自我的手机'
- 发送
```
{% endblock %}

【场景二】从微博上复制的一个图像链接来创建图像消息：

{% block imageMessage_url_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 创建与 Jerry 的对话，对话名称是「猫和老鼠」
- 创建图像消息：http://pic2.zhimg.com/6c10e6053c739ed0ce676a0aff15cf1c.gif
- 加入文本：萌妹子一枚
- 发送
```
{% endblock %}

以上两种场景对于 SDK 的区别为：

* 场景一：SDK 获取了完整的图像数据流，先上传文件到云端，再将文件的元数据以及 URL 等一并包装，发送出去。

* 场景二：SDK 并没有将图像实际上传到云端，而仅仅把 URL 包装在消息体内发送出去，这种情况下接收方是无法从消息体中获取图像的元信息数据，但是接收方可以自行通过客户端技术去分析图片的格式、大小、长宽之类的元数据。

##### 接收图像消息

{% block imageMessage_received_intro %}{% endblock %}

{% block imageMessage_received %}

```
- 初始化 ClientId = Jerry
- Jerry 登录到系统
- 获取对话 Id = 55117292e4b065f7ee9edd29
- 收取图像，获取相关元数据 MessageId、FromClientId、URL、Size、Width、Height、Format 等
```
{% endblock %}

#### 音频消息

##### 发送音频消息

发送音频消息的基本流程是：读取音频文件（或者录制音频）> 构建音频消息 > 消息发送。

{% block audioMessage_local_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 创建与 Jerry 的对话，对话名称为「猫和老鼠」
- 本地读取音频文件：'忐忑.mp3' ，创建音频消息
- 加入文本：'听听人类的神曲~'
- 发送
```
{% endblock %}

与图像消息类似，音频消息也支持从 URL 构建：

{% block audioMessage_url_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 创建与 Jerry 的对话，对话名称为「猫和老鼠」
- 从外部链接创建音频消息：http://ac-lhzo7z96.clouddn.com/1427444393952
- 创建音频消息
- 发送
```
{% endblock %}

##### 接收音频消息

{% block audioMessage_received_intro %}
```
- 音频元信息提取/列表 [messageId, file.url, size, duration, format]
```
{% endblock %}

#### 视频消息

##### 发送视频消息

与发送音频消息的流程类似，视频的来源可以是手机录制，可以是系统中某一个具体的视频文件：

{% block videoMessage_local_sent %}

```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 创建与 Jerry 的对话，对话名称为「猫和老鼠」
- 打开本地文件夹
- 读取视频文件：'BBC_奶酪.mp4'，创建视频消息
- 发送
```
{% endblock %}

同样我们也支持从一个视频的 URL 创建视频消息，然后发送出去：

{% block videoMessage_url_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 创建与 Jerry 的对话，对话名称为「猫和老鼠」
- 从外部链接创建视频消息：http://ac-lhzo7z96.clouddn.com/1427267336319
- 发送给 Jerry
```
{% endblock %}

**注：这里说的 URL 指的是视频文件自身的 URL，而不是视频网站上播放页的 URL。**

##### 接收视频消息

{% block videoMessage_received_intro %}

```
- 视频元信息提取/列表[messageId, file.url, size, duration, format]
```
{% endblock %}

{% block commonFileMessage_intro %}{% endblock %}

#### 地理位置消息

地理位置消息构建方式如下：

{% block locationMessage_new %}

```
- 1.根据纬度和经度（latitude: 45.0 longitude:34.0）构建
  AVIMLocationMessage()
- 2. AVGeoPoint 构建
  AVIMLocationMessage(
    AVGeoPoint(31.3853142377, 121.0553079844)
  )
```
{% endblock %}

##### 发送地理位置消息

{% block locationMessage_sent %}

```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 创建与 Jerry 的对话，对话名称为「猫和老鼠」
- 以经度和纬度为参数构建一个地理位置消息 AVIMLocationMessage(138.12454, 52.56461)
- 加入文本："新开的蛋糕店！耗子咱们有福了…"
//开发者更可以通过具体的设备的 API 去获取设备的地理位置
- 发送
```
{% endblock %}

##### 接收地理位置消息

{% block locationMessage_received_intro %}

```
- 此处各个 SDK 平台需要详细介绍一下如何接收 TypedMessage 接收，包含文字和代码。描述风格以及代码示例请参照 iOS 版本。
```
{% endblock %}

{% block typedMessage_received %}{% endblock %}

### 暂态消息

暂态消息不会被自动保存（以后在历史消息中无法找到它），也不支持延迟接收，离线用户更不会收到推送通知，所以适合用来做控制协议。譬如聊天过程中「某某正在输入...」这样的状态信息，就适合通过暂态消息来发送；或者当群聊的名称修改以后，也可以用暂态消息来通知该群的成员「群名称被某某修改为...」。

{% block transientMessage_sent %}
```
- 初始化 ClientId = Tom
- Tom 登录到系统
- 进入与 Jerry 的对话 id = 551260efe4b01608686c3e0f
- 在 Tom 输入的同时，向 Jerry 发送提示："Tom 正在输入……"
```
{% endblock %}

而对话中的其他成员在聊天界面中需要有以下代码做出响应：

{% block transientMessage_received %}
```
- 初始化 ClientId = Jerry
- Jerry 登录到系统
- 进入与 Tom 的对话 id = 551260efe4b01608686c3e0f
- 此时收到提示："Tom 正在输入……"
```
{% endblock %}

### 消息的发送
{% block api_send_message_method_intro %}{% endblock %}

{% block messagePolicy_sent %}{% endblock %}

#### 多媒体消息发送

目前 SDK 内置的多媒体消息类如下：

* 图像 `AVIMImageMessage`
* 音频 `AVIMAudioMessage`
* 视频 `AVIMVideoMessage`
* 文件 `AVIMFileMessage`

所有多媒体消息类型的发送流程如下：

如果文件是从**客户端 API 读取的数据流 (Stream)**，步骤为：

1. 从本地构造 AVFile
1. 调用 AVFile 的上传方法将文件上传到云端，并获取文件元信息（MetaData）
1. 把 AVFile 的 objectId、URL ，以及文件的元信息封装在消息体内
1. 调用接口发送消息

如果文件是**外部链接的 URL**，则：

1. 直接将 URL 封装在消息体内，不获取元信息，不包含 objectId
1. 调用接口发送消息

#### 启用离线消息通知

不管是单聊还是群聊，当用户 A 发出消息后，如果目标对话的部分用户当前不在线，LeanCloud 云端可以提供离线推送的方式来提醒用户。

{% block offlineMessage_android %}{% endblock %}

这一功能默认是关闭的，你可以在 LeanCloud 应用控制台中开启它。操作方法请参考 [实时通信概览 &middot; 离线推送通知](realtime_v2.html#离线推送通知)。

{% block offlineMessage %}{% endblock %}

#### 消息送达回执

是指消息被对方收到之后，云端会发送一个回执通知给发送方，表明消息已经送达。
需要注意的是：

> 只有在发送时设置了「等待回执」标记，云端才会发送回执，默认不发送回执。该回执并不代表用户已读。

{% block message_sent_ack %}{% endblock %}

### 消息的接收

{% block messagePolicy_received_intro %}
消息的接收策略在不同平台有不同的实现。
{% endblock %}

{% block messagePolicy_received %}{% endblock %}

{% if segment_code != "dotnet" %}
#### 未拉取的离线消息

未拉取的离线消息指的是客户端尚未主动拉取到本地的消息。

SDK 默认的接收机制是：当客户端上线时，离线消息会自动通过长连接发送至客户端。如果开启了「未读消息」，消息接收机制变为：当客户端上线时，会收到其参与过的会话的离线消息数量，云端不再主动将离线消息通知发送至客户端，转而由客户端负责主动拉取。

{% block message_unread %}{% endblock %}

注意：客户端<u>在线上时</u>收到的消息默认为**已读**，不存在未读的情况。因此开发者不需要将这样的消息标记为已读。
{% endif %}

### 消息类详解
{% block message_Relation_intro %}{% endblock %}

{% block message_Properties_intro %}{% endblock %}

### 自定义消息

在某些场景下，开发者需要在发送消息时附带上自己业务逻辑需求的自定义属性，比如消息发送的设备名称，或是图像消息的拍摄地点、视频消息的来源等等，开发者可以通过 {{attributes}} 实现这一需求。

【场景】发照片给朋友，告诉对方照片的拍摄地点：

{% block customAttributesMessage_sent %}
```
- 构造一个 AVIMImageMessage
- 在 Attributes 中加入 location = "拉萨布达拉宫"
- 设置 Title = "这蓝天……我彻底是醉了";
- 发送
```
{% endblock %}

接收时可以读取这一属性：

{% block customAttributesMessage_received %}
```
- 初始化 ClientId = friend
- 登录到系统
- 接收消息，如果是 Image，读取 Attributes[location]
- //读取的结果就是拉萨布达拉宫
```
{% endblock %}

所有的 `AVIMTypedMessage` 消息都支持 `{% block attributes_property %}{% endblock %}` 这一属性。

#### 创建新的消息类型

{% block customMessage_create %}
```
- 新建 NewsMessage 类型
- 初始化 NewsMessage 的实例
- Tom 发送 NewsMessage 实例给 Jerry
```
{% endblock %}

> **什么时候需要自己创建新的消息类型？**
>
>譬如有一条图像消息，除了文本之外，还需要附带地理位置信息，为此开发者需要创建一个新的消息类型吗？从上面的例子可以看出，其实完全没有必要。这种情况只要使用消息类中预留的 {{attributes}} 属性就可以保存额外的地理位置信息了。
>
>只有在我们的消息类型完全无法满足需求的时候，才需要扩展自己的消息类型。譬如「今日头条」里面允许用户发送某条新闻给好友，在展示上需要新闻的标题、摘要、图片等信息（类似于微博中的 linkcard）的话，这时候就可以扩展一个新的 NewsMessage 类。

## 对话

以上章节基本演示了实时通信 SDK 的核心概念「对话」，即 `AVIMConversation`。我们将单聊和群聊（包括聊天室）的消息发送和接收都依托于 `AVIMConversation` 这个统一的概念进行操作，所以开发者需要强化理解的一个概念就是：
>SDK 层面不区分单聊和群聊。

{% block conversation_specialnote %}{% endblock %}

对话的管理包括「成员管理」和「属性管理」两个方面。

在讲解下面的内容之前，我们先来创建一个多人对话。后面的举例都要基于这个对话，所以**这一步是必须的**。请将以下代码复制到 IDE 并且执行。

{% block conversation_init %}

```
- 初始化 ClientId = Jerry
- Jerry 登录
- 创建朋友列表 friends = [Bob, Harry, William]
- 用 friends 创建新对话
```
{% endblock %}

{% block conversation_creation_api %}{% endblock %}

### 对话的成员管理

成员管理，是在对话中对成员的一个实时生效的操作，一旦操作成功则不可逆。

#### 成员变更接口
成员变更操作接口简介如下表：

操作目的|接口名
----|---
自身主动加入 | {% block api_method_conversation_join %}{% endblock %}
添加其他成员 | {% block api_method_conversation_invite %}{% endblock %}
自身主动退出 | {% block api_method_conversation_quit %}{% endblock %}
剔除其他成员 | {% block api_method_conversation_kick %}{% endblock %}

成员变动之后，所有对话成员如果在线的话，都会得到相应的通知。

{% block conversation_members_change_notice_intro %}{% endblock %}

#### 自身主动加入

Tom 想主动加入 Jerry、Bob、Harry 和 William 的对话，以下代码将帮助他实现这个功能：

{% block conversation_join %}

```
- 初始化 ClientId = Tom
- Tom 登录
- 获取  id 为 551260efe4b01608686c3e0f 的对话 //获取 Jerry 创建的对话的 Id，这里是直接从控制台复制了上一节准备工作中所创建的对话的 objectId
- Tom 主动加入到对话中
```
{% endblock %}

{% block conversation_membersChanged_callBack %}{% endblock %}


#### 添加其他成员

Jerry 想再把 Mary 加入到对话中，需要如下代码帮助他实现这个功能：

{% block conversation_invite %}
```
- 初始化 ClientId = Jerry
- Jerry 登录
- 假定对话 Id = 551260efe4b01608686c3e0f
- 进入对话
- Jerry 把 Mary 加入到对话 //AddMembers
```
{% endblock %}

该对话的其他成员（例如 Harry）也会受到该项操作的影响，收到事件被响应的通知，类似于第一小节 [自身主动加入](#自身主动加入) 中**Tom 加入对话之后，Bob 受到的影响。**

{% block conversation_invite_events %}{% endblock %}

>注意：如果在进行邀请操作时，被邀请者不在线，那么通知消息并不会被离线缓存，所以等到 Ta 再次上线的时候将不会收到通知。

#### 自身退出对话
这里一定要区分**自身退出对话**的主动性，它与**自身被动被踢出**（下一小节）在逻辑上完全是不一样的。

Tom 主动从对话中退出，他需要如下代码实现需求：

{% block conversation_left %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 假定对话 Id = 551260efe4b01608686c3e0f //由 Jerry 创建的对话
- 进入对话
- Tom 主动从对话中退出 //left
```
{% endblock %}

#### 剔除其他成员

Harry 被 William 从对话中删除。实现代码如下（关于 William 如何获得权限在后面的 [签名和安全](#签名和安全) 中会做详细阐述，此处不宜扩大话题范围。）：

{% block conversation_kick %}
```
- 初始化 ClientId = William
- William 登录
- 对话 Id = 551260efe4b01608686c3e0f //由 Jerry 创建的对话
- 进入对话
- William 把 Harry 从对话中踢出去 //RemoveMembers
```
{% endblock %}

{% block conversation_kick_events %}{% endblock %}

>注意：如果在进行踢人操作时，被踢者不在线，那么通知消息并不会被离线缓存，所以等到 Ta 再次上线的时候将不会收到通知。

#### 查询成员数量
{% block conversation_countMember_method %}{% endblock %}这个方法返回的是实时数据：

{% block conversation_countMember %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 获取对话列表，找到第一个对话
- 获取该对话成员数量
```
{% endblock %}

### 对话的属性管理

对话实例（AVIMConversation）与控制台中 `_Conversation` 表是一一对应的，默认提供的属性的对应关系如下：

{% block table_conversation_attributes_intro %}{% endblock %}

#### 名称

这是一个全员共享的属性，它可以在创建时指定，也可以在日后的维护中被修改。

Tom 想建立一个名字叫「喵星人」 对话并且邀请了好友 Black 加入对话：

{% block conversation_name %}{% endblock %}

Black 发现对话名字不够酷，他想修改成「聪明的喵星人」 ，他需要如下代码：

{% block conversation_changeName %}{% endblock %}

####  成员

是当前对话中所有成员的 `clientId`。默认情况下，创建者是在包含在成员列表中的，直到 TA 退出对话。

>**强烈建议开发者切勿在控制台中对其进行修改**。所有关于成员的操作请参照上一章节中的 [对话的成员管理](#对话的成员管理) 来进行。

#### 静音
假如某一用户不想再收到某对话的消息提醒，但又不想直接退出对话，可以使用静音操作，即开启「免打扰模式」。

比如 Tom 工作繁忙，对某个对话设置了静音：

{% block conversation_mute %}{% endblock %}

>设置静音之后，iOS 和 Windows Phone 的用户就不会收到推送消息了。

与之对应的就是取消静音的操作，即取消免打扰模式{% block conversation_unmute %}{% endblock %}。此操作会修改云端 `_Conversation` 里面的 `mu` 属性。**强烈建议开发者切勿在控制台中对 `mu` 随意进行修改**。

#### 创建者

即对话的创建者，它的值是对话创建者的 `clientId`。

它等价于 QQ 群中的「群创建者」，但区别于「群管理员」。比如 QQ 群的「创建者」是固定不变的，它的图标颜色与「管理员」的图标颜色都不一样。所以根据对话中成员的 `clientId` 是否与 {% block conversation_property_name %}`AVIMConversation.Creator`{% endblock %} 一致就可以判断出他是不是群的创建者。

#### 自定义属性

通过该属性，开发者可以随意存储自己的键值对，为对话添加自定义属性，来满足业务逻辑需求。

给某个对话加上两个自定义的属性：type = "private"（类型为私有）、isSticky = true（置顶显示）：

{% block conversation_attributes_new %}{% endblock %}

{% block conversation_attributes_modify %}
- 初始化 ClientId = Tom
- Tom 登录
- 找到 id 为 551260efe4b01608686c3e0f 的对话
- 将自定义属性 type 值更新为 public
- 保存新版本的自定义属性
{% endblock %}

**自定义属性在 SDK 级别是对所有成员可见的**。如果要控制所谓的可见性，开发者需要自己维护这一属性的读取权限。要对自定义属性进行查询，请参见 [对话的查询](#对话的查询)。

### 对话的查询

#### 对话的有效期

一个对话（包括普通、暂态、系统对话）如果一年内没有通过 SDK 或者 REST API 发送过新的消息，或者它在 `_Conversation` 表中的任意字段没有被更新过，即被视为**不活跃对话**，云端会自动将其删除。（查询对话的消息记录并不会更新 `_Conversation` 表，所以只查询不发送消息的对话仍会被视为不活跃对话。）

不活跃的对话被删除后，当客户端再次通过 SDK 或 REST API 对其进行查询或发送消息时，会遇到 
`4401 INVALID_MESSAGING_TARGET` 错误，表示该对话已经不存在了。同时，与该对话相关的消息历史也无法获取。

反之，活跃的对话会一直保存在云端。

<!-- #### 基础查询 -->

#### 根据 id 查询

假如已知某一对话的 Id，可以使用它来查询该对话的详细信息：

{% block conversation_getSingle %}

```
- 初始化 ClientId = Tom
- Tom 登录
- 异步从云端拉取对话：id = 551260efe4b01608686c3e0f
```
{% endblock %}

#### 对话列表

用户登录进应用后，获取最近的 10 个对话（包含暂态对话，如聊天室）：

{% block conversation_getList %}

```
- 初始化 ClientId = Tom
- Tom 登录
- 获取对话列表 //按每个对话的最后更新日期（收到最后一条消息的时间）倒序排列
```
{% endblock %}

对话的查询默认返回 10 个结果，若要更改返回结果数量，请设置 `limit` 值。

{% block conversation_query_limit %}

```
- Tom 登录
- Tom 查询自己所在的最近 20 个活跃的对话
```
{% endblock %}

#### 条件查询

##### 构建查询

对话的条件查询需要注意的对话属性的存储结构，在对话的属性一章节我们介绍的对话的几个基本属性，这些属性都是 SDK 提供的默认属性，根据默认属性查询的构建如下：

{% block pattern_conservation_query_default_property %}
```
- 查询对话名称为「LeanCloud 粉丝群」的对话
- 查询对话名称包含 「LeanCloud」 的对话
- 查询过去24小时活跃的对话
```
{% endblock %}

相对于默认属性的查询，开发者自定义属性的查询需要在构建查询的时在关键字（key）前加上一个特殊的前缀：`attr`，不过每个 SDK 都提供相关的快捷方式帮助开发者方便的构建查询：

{% block pattern_conservation_query_custom_property %}
```
- 查询话题为 DOTA2 对话
- 查询等级大于 5 的对话
```
{% endblock %}

默认属性以及自定义属性的区分便于 SDK 后续的内建属性拓展和维护，自定义属性的开放有利于开发者在可控的范围内进行查询的构建。

{% block conversation_query_content %}
条件查询又分为：比较查询、正则匹配查询、包含查询，以下会做分类演示。
{% endblock %}

#### 比较查询

比较查询在一般的理解上都包含以下几种：

{% block table_conservation_query_than %}{% endblock %}

比较查询最常用的是等于查询：

{% block conversation_query_equalTo %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 构建查询条件：attr.topic = "movie"
- 执行查询
```
{% endblock %}

目前条件查询只针对 `AVIMConversation` 对象的自定义属性进行操作，也就是针对 `_Conversation` 表中的 `attr` 字段进行 `AVQuery` 查询。

{% block conversation_query_insertAttrPrefix %}{% endblock %}

下面检索一下类型不是私有的对话：

{% block conversation_query_notEqualTo %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 构建查询条件 attr.type 不等于 private
- limit 设为 50 //默认为 10 个
- 执行查询
```
{% endblock %}

对于可以比较大小的整型、浮点等常用类型，可以参照以下示例代码进行扩展：

{% block conversation_query_greaterThan %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 构建查询条件：attr.age > 18
- 执行查询
```
{% endblock %}

#### 正则匹配查询

{% block conversation_query_regexIntro %}{% endblock %}

比如要查询所有 language 是中文的对话：

{% block conversation_query_regex %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 构建查询条件：attr.language 是中文的查询 // 正则为 [\u4e00-\u9fa5]
- 执行查询
```
{% endblock %}

#### 包含查询

包含查询是指方法名字包含 `Contains` 单词的方法，例如查询关键字包含「教育」的对话：

{% block conversation_query_contains %}
``````
- 初始化 ClientId = Tom
- Tom 登录
- 构建查询条件：attr.keywords 包含 "教育"
- 执行查询
```
{% endblock %}

另外，包含查询还能检索与成员相关的对话数据。以下代码将帮助 Tom 查找出 Jerry 以及 Bob 都加入的对话：

{% block conversation_query_findJoinedMemebers %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 构建 clientIds 列表：[Bob, Jerry]
- 构构建查询条件：对话成员有 Bob 和 Jerry
- 执行查询
```
{% endblock %}

{% block conversation_query_exists %}{% endblock %}

#### 组合查询

组合查询的概念就是把诸多查询条件合并成一个查询，再交给 SDK 去云端进行查询。

{% block conversation_query_chaining %}{% endblock %}例如，要查询年龄小于 18 岁，并且关键字包含「教育」的对话：

{% block conversation_query_combination %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 构建查询条件：attr.keywords 包含「教育」、attr.age < 18
- 执行查询
```
{% endblock %}

只要查询构建得合理，开发者完全不需要担心组合查询的性能。

{% block conversation_query_cache %}
#### 缓存查询

通常，将查询结果缓存到磁盘上是一种行之有效的方法，这样就算设备离线，应用刚刚打开，网络请求尚未完成时，数据也能显示出来。或者为了节省用户流量，在应用打开的第一次查询走网络，之后的查询可优先走本地缓存。

值得注意的是，默认的策略是先走本地缓存的再走网络的，缓存时间是一小时。AVIMConversationQuery 中有如下方法：

{% block code_set_query_policy %}{% endblock %}

{% block code_query_from_local_cache %}{% endblock %}

各种查询缓存策略的行为可以参考 {% block link_avquery_chache %}{% endblock %}

{% endblock %}
## 聊天室

聊天室本质上就是一个对话，所以上面章节提到的**所有属性、方法、操作以及管理都适用于聊天室**。它仅仅在逻辑上是一种暂态、临时的对话，应用场景有弹幕、直播等等。

聊天室与普通对话或群聊不一样的地方具体体现为：

* **无人数限制**（而普通对话最多允许 500 人加入）<br/><span class="text-muted">从实际经验来看，为避免过量消息刷屏而影响用户体验，我们建议每个聊天室的<u>上限人数控制在 **5000 人**左右</u>。开发者可以考虑从应用层面将大聊天室拆分成多个较小的聊天室。</span>
* 不支持查询成员列表，但可以通过相关 API 查询在线人数。
* 不支持离线消息、离线推送通知、消息回执等功能。
* 没有成员加入、成员离开的通知。
* 一个用户一次登录只能加入一个聊天室，加入新的聊天室后会自动离开原来的聊天室。
* 加入后半小时内断网重连会自动加入原聊天室，超过这个时间则需要重新加入。

### 创建聊天室

{% block chatroom_intro %}{% endblock %}

比如喵星球正在直播选美比赛，主持人 Tom 创建了一个临时对话，与喵粉们进行互动：

{% block chatroom_new %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 创建暂态对话，名称 "HelloKitty PK 加菲猫"
```
{% endblock %}

{% block chatroom_create %}{% endblock %}

### 查询在线人数

{% block chatroom_count_method %}{% endblock %} 可以用来查询普通对话的成员总数，在聊天室中，它返回的就是实时在线的人数：

{% block chatroom_count %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 获取对话列表中的第一个暂态对话对象
- 获取人数
```
{% endblock %}

### 查找聊天室

开发者需要注意的是，通过 {% block create_query_instance_method %}{% endblock %} 这样得到的 `AVIMConversationQuery` 实例默认是查询全部对话的，也就是说，如果想查询指定的聊天室，需要额外再调用 {% block chatroom_query_method2 %}{% endblock %} 方法来限定更多的查询条件：

比如查询主题包含「奔跑吧，兄弟」的聊天室：

{% block chatroom_query_single %}
```
- 初始化 ClientId = Tom
- Tom 登录
- 获取对话列表中 attr.topic = "奔跑吧，兄弟"、tr = true
- 执行查询
```
{% endblock %}

{% block chatroom_query_extra %}{% endblock %}

## 聊天记录

聊天记录一直是客户端开发的一个重点，QQ 和 微信的解决方案都是依托客户端做缓存，当收到一条消息时就按照自己的业务逻辑存储在客户端的文件或者是各种客户端数据库中。

我们的 SDK 会将普通的对话消息自动保存在云端，开发者可以通过 AVIMConversation 来获取该对话的所有历史消息。

获取该对话中最近的 N 条（默认 20，最大值 1000）历史消息，通常在第一次进入对话时使用：

{% block conversation_messageHistoryByLimit %}
```
- 初始化 ClientId = Tom
- 获取对话对象 id = 2f08e882f2a11ef07902eeb510d4223b
- 获取最近的 10 条历史消息
```
{% endblock %}

获取某条消息之前的历史消息，通常用在翻页加载更多历史消息的场景中。
{% block conversation_messageHistoryBeforeId %}
```
- 获取早于 messageId = grqEG2OqSL+i8FSX9j3l2g 而且时间戳早于 1436137606358 的 10 条消息
```
{% endblock %}

翻页获取历史消息的时候，LeanCloud 云端是从某条消息开始，往前查找所指定的 N 条消息来返回给客户端。为此，获取历史消息需要传入三个参数：

* 起始消息的 messageId
* 起始消息的发送时间戳
* 需要获取的消息条数

假如每一页为 10 条信息，下面的代码将演示如何翻页：

{% block conversation_messageHistory_pager %}
```
- 初始化 ClientId = Tom
- 获取对话对象 id = 2f08e882f2a11ef07902eeb510d4223b
- 获取最近的 10 条历史消息
- 再根据上一步的第 10 条消息的 msgId，timestamp 和 limit 获取第二页的数据
```
{% endblock %}

{% block text_im_history_cache %}
### 客户端聊天记录缓存

为了减少客户端的请求数量，以及减少用户的流量，SDK 实现了一套缓存同步策略。用户在调用获取聊天记录的接口时优先从缓存中获取，SDK 是有算法保证本地与云端聊天记录是同步的。

聊天记录的缓存功能默认为**开启**，但如果开发者出于自身业务逻辑需求，不想在客户端使用缓存功能，可以使用如下接口将其关闭：

{% block disable_im_cache %}{% endblock %}

{% endblock %}

## 客户端事件

### 网络状态响应

当网络连接出现中断、恢复等状态变化时，可以通过以下接口来处理响应：

{% block networkStatus %}{% endblock %}

>注意：网络状态在短时间内很可能会发生频繁变化，但这并不代表对话的接收与发送一定会受到影响，因此开发者在处理此类事件响应时，比如更新 UI，要适应加入更多的逻辑判断，以免影响用户的使用体验。

{% block auto_reconnect %}
### 断线重连
目前 {{sdk_name}} 默认内置了断线重连的功能，从客户端与云端建立连接成功开始，只要没有调用退出登录的接口，SDK 会一直尝试和云端保持长连接，此时 AVIMClient 的状态可以通过 [网络状态响应](#网络状态响应)接口得到。

**注意：用户如果自行实现了重连逻辑可能会报出 1001 错误**。
{% endblock %}

### 退出登录

要退出当前的登录状态或要切换账户，方法如下：

{% block logout %}{% endblock %}

{% block communicate_with_otherSDK %}{% endblock %}

## 安全与签名

在继续阅读下文之前，请确保你已经对 [实时通信服务开发指南 &middot; 权限和认证](realtime_v2.html#权限和认证) 有了充分的了解。

### 实现签名工厂

为了满足开发者对权限和认证的要求，我们设计了操作签名的机制。签名启用后，所有的用户登录、对话创建/加入、邀请成员、踢出成员等登录都需要验证签名，这样开发者就对消息具有了完全的掌控。

{% if node=='qcloud' %}
我们强烈推荐启用签名，具体步骤是 `控制台 > 设置 > 应用选项`，勾选 **聊天、推送** 下的 **聊天服务，启用签名认证**。
{% else %}
我们强烈推荐启用签名，具体步骤是 [控制台 > 设置 > 应用选项](/app.html?appid={{appid}}#/permission)，勾选 **聊天、推送** 下的 **聊天服务，启用签名认证**。
{% endif %}

{% block conversation_security %}{% endblock %}

> 需要强调的是：开发者切勿在客户端直接使用 MasterKey 进行签名操作，因为 MaterKey 一旦泄露，会造成应用的数据处于高危状态，后果不容小视。因此，强烈建议开发者将签名的具体代码托管在安全性高稳定性好的云端服务器上（例如 LeanCloud 云引擎）。

为了帮助开发者理解云端签名的算法，我们开源了一个用 Node.js + 云引擎实现签名的云端，供开发者学习和使用：[LeanCloud 实时通信云引擎签名 Demo](https://github.com/leancloud/realtime-messaging-signature-cloudcode)。

{% block text_single_endpoint_login %}
### 单点登录

一款聊天应用，随着不断的发展，会衍生出多个平台的不同客户端。以 QQ 为例，目前它所提供的客户端如下：

- PC：Windows PC、Mac OS、Linux（已停止更新）
- 移动：Windows Phone、iOS、Android
- [Web QQ](http://noreferer.net/?url=http://w.qq.com)

经过测试，我们发现 QQ 存在以下几种行为：

1. 同一个 QQ 账号不可以同时在 2 个 PC 端登录（例如，在 Mac OS 上登录已经在另外一台 Windows PC 上登录的 QQ，该 QQ 号在 Windows PC 上会被强行下线）。
2. 同一个 QQ 账号不可以同时在 2 个移动端上登录。
3. Web QQ 也不能与 PC 端同时登录
4. 同一个 QQ 只能同时在 1 个移动版本和 1 PC 版本（或者 Web 版本）上登录，并实现一些 PC 与移动端互动的功能，例如互传文件。

通过规律不难发现，QQ 按照自己的需求实现了「单点登录」的功能：同一个平台上只允许一个 QQ 登录一台设备。

下面我们来详细说明：如何使用我们的 SDK 去实现单点登录。

#### 设置登录标记 Tag

假设开发者想实现 QQ 这样的功能，那么需要在登录到云端的时候，也就是打开与云端长连接的时候，标记一下这个链接是从什么类型的客户端登录到云端的：

{% block connect_with_tag %}{% endblock %}

上述代码可以理解为 LeanCloud 版 QQ 的登录，而另一个带有同样 Tag 的客户端打开连接，则较早前登录系统的客户端会被强制下线。

#### 处理登录冲突

我们可以看到上述代码中，登录的 Tag 是 `Mobile`。当存在与其相同的 Tag 登录的客户端，较早前登录的设备会被云端强行下线，而且他会收到被云端下线的通知：

{% block disconnected_by_server_with_same_tag %}{% endblock %}

如上述代码中，被动下线的时候，云端会告知原因，因此客户端在做展现的时候也可以做出类似于 QQ 一样友好的通知。

{% endblock %}

{% block client_auto_open %}{% endblock %}

## 实时通信云引擎 Hook
一些应用因其特殊的业务逻辑需要在消息发送时或者消息接收时插入一定的逻辑，因此我们也提供了[实时通信云引擎 Hook](realtime_v2.html#云引擎_Hook)。

## 实时通信 REST API
有些应用需要在用户登录之前就提前创建一些对话或者是针对对话进行操作，因此可以通过[实时通信 REST API](realtime_rest_api.html)来实现。

## 常见问题

**我只想实现两个用户的私聊，是不是每次都得重复创建对话？**

不需要重复创建。我们推荐的方式是开发者可以用**自定义属性**来实现对私聊和群聊的标识，并且在进行私聊之前，需要查询当前两个参与对话的 ClientId 是否之前已经存在一个私聊的对话了。{% block goto_create_unique_conversation %}另外，SDK 已经提供了创建唯一对话的接口，请查看 [创建对话](#创建对话)。{% endblock %}


**某个成员退出对话之后，再加入，在他离开的这段期间内的产生的聊天记录，他还能获取么？**

可以。目前聊天记录从属关系是属于对话的，也就是说，只要对话 Id 不变，不论人员如何变动，只要这个对话产生的聊天记录，当前成员都可以获取。

**我自己没有云端，如何实现签名的功能？**

LeanCloud 云引擎提供了托管 Python 和 Node.js 运行的方式，开发者可以所以用这两种语言按照签名的算法实现签名，完全可以支持开发者的自定义权限控制。

**客户端连接被关闭**

导致这一情况的原因很多，请参考 [云端错误码说明](realtime_v2.html#云端错误码说明)。

{% block platform_specific_faq %}{% endblock %}
